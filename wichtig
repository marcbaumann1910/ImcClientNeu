client Statistik Server
http://localhost:33345

Wichtige Befehle Frontend:
$ npm run dev (starten  der Anwendung im Entwicklungsmodus)
$ npm run build (bauen des Frontends für das Produktionssystem, liegt im /dist Ordner)
$ rsync -avz ~/Documents/InventoryManagementSystem/client/ root@x.x.x.x:/var/www/frontend (das build auf den Produktionsserver hochladen)

Wichtige Befehle für das Backend:
$ npx nodemon ./src/app.js (starten des Backend im Entwicklermodus)
$ sudo lsof -i :3000 (prüfen was auf Port 3000 läuft, wenn Backend nicht startet)
$ sudo kill -9 XXXXX (den Prozess beenden, der auf 3000 läuft, XXXXXX durch die ProzessID ersetzen)
$ rsync -avz ~/Documents/InventoryManagementSystem/server root@x.x.x.x:/var/www/backend (Upload des Backend auf das Produktionssystem)
(wird das Backend zum erstmal hochgeladen, muss auf dem vServer (Produktionssystem) im entsprechenden Ordner
z.B. /var/www/backend/client gewechselt werden und npm install ausgeführt werden. Dies muss auch dann getan werden, sollten neue
Pakete in der Entwicklung hinzugefügt werden und im Anschluss auf den Produktionsserver hochgeladen wurde.
Auch müssen regelmäßig updates der npm Pakete druchgeführt werden

!!!Funktionierende apache config inkl. Weiterleitung an das Backend!!!!!
DOMAIN:
### mbdevelop.de ###

<VirtualHost *:443>
    ServerName mbdevelop.de
    DocumentRoot /var/www/html/mbdevelop

    SSLEngine on
    SSLCertificateFile /etc/letsencrypt/live/mbdevelop.de/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/mbdevelop.de/privkey.pem

    # WebSocket Support für Vite HMR
    RewriteEngine On
    RewriteCond %{HTTP:Upgrade} =websocket [NC]
    RewriteCond %{HTTP:Connection} upgrade [NC]
    RewriteRule /ws/(.*) ws://localhost:4000/$1 [P,L]

    # Backend für API-Anfragen
    ProxyPreserveHost On
    ProxyPass /api http://localhost:3000
    ProxyPassReverse /api http://localhost:3000

    # Frontend
    ProxyPass / http://localhost:4000/
    ProxyPassReverse / http://localhost:4000/

    # Weiterleitung von HTTP zu HTTPS, aber nicht für Let's Encrypt
    # RewriteEngine On
    # RewriteCond %{REQUEST_URI} !^/\.well-known/acme-challenge/
    # RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R=301,L]

    # Zusätzliche Sicherheitsoptionen
    <IfModule mod_headers.c>
        Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
    </IfModule>

    ErrorLog ${APACHE_LOG_DIR}/mbdevelop_error.log
    CustomLog ${APACHE_LOG_DIR}/mbdevelop_access.log combined
</VirtualHost>

<VirtualHost *:80>
    ServerName mbdevelop.de
    ServerAlias www.mbdevelop.de

    DocumentRoot /var/www/html

    # Erlaube die Nutzung von .well-known für Let's Encrypt
    Alias /.well-known/acme-challenge/ /var/www/html/.well-known/acme-challenge/
    <Directory "/var/www/html/.well-known/acme-challenge/">
        Options None
        AllowOverride None
        ForceType text/plain
        Require all granted
    </Directory>

    # HTTP zu HTTPS umleiten, außer .well-known/acme-challenge
    RewriteEngine On
    RewriteCond %{REQUEST_URI} !^/\.well-known/acme-challenge/
    RewriteRule ^(.*)$ https://mbdevelop.de$1 [R=301,L]

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
